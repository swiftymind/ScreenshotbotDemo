name: Screenshotbot CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4.0'

    - name: Check directory structure
      run: |
        pwd
        ls -la
        echo "=== Root directory ==="
        find . -maxdepth 2 -name "*.xcodeproj" -o -name "*.xcworkspace"

    - name: List available schemes
      run: |
        xcodebuild -project ScreenshotbotDemo.xcodeproj -list

    - name: List available simulators
      run: |
        xcrun simctl list devices available

    - name: Build and Test
      continue-on-error: true  # Allow workflow to continue even if tests fail
      run: |
        xcodebuild test \
          -project ScreenshotbotDemo.xcodeproj \
          -scheme ScreenshotbotDemo \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -enableCodeCoverage YES \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults.xcresult

    - name: Extract test logs
      run: |
        echo "=== Test Summary ==="
        xcrun xcresulttool get --path TestResults.xcresult --format json
        
        echo "=== Test Failures ==="
        xcrun xcresulttool get --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[] | "\(.testCaseName): \(.message)"' || echo "No test failures found"

    - name: Find screenshots
      run: |
        echo "=== Finding screenshots ==="
        find DerivedData -name "*.png" -type f
        find DerivedData -name "*.jpg" -type f
        
        echo "=== Checking reference images ==="
        find . -name "*.png" -type f | grep -i reference || echo "No reference images found"

    - name: Run Screenshotbot
      continue-on-error: true  # Allow workflow to continue even if Screenshotbot fails
      run: |
        curl -L -o screenshotbot "https://github.com/screenshotbot/screenshotbot-cli/releases/latest/download/screenshotbot-macos"
        chmod +x screenshotbot
        ./screenshotbot \
          --api-key=${{ secrets.SCREENSHOTBOT_API_KEY }} \
          --channel=ci \
          --directory=DerivedData/Logs/Test \
          --fail-on-regression=false \
          --annotation=github-pr

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          DerivedData/Logs/Test/
          DerivedData/Logs/Test/*.png
          DerivedData/Logs/Test/*.jpg
          TestResults.xcresult
        if-no-files-found: warn
        retention-days: 30

    - name: Upload reference images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reference-images
        path: |
          **/*Reference*.png
          **/*reference*.png
        if-no-files-found: warn
        retention-days: 30

    - name: Create test summary
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        xcrun xcresulttool get --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[] | "❌ \(.testCaseName): \(.message)"' >> $GITHUB_STEP_SUMMARY || echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "### Screenshotbot Results" >> $GITHUB_STEP_SUMMARY
        echo "Check the [Screenshotbot dashboard](https://screenshotbot.io) for visual comparison results." >> $GITHUB_STEP_SUMMARY

    - name: Mark build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build completed successfully"
        else
          echo "⚠️ Build completed with test failures - check Screenshotbot for visual regressions"
        fi
