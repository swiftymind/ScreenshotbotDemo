name: Screenshotbot CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4.0'

    - name: Check directory structure
      run: |
        pwd
        ls -la
        echo "=== Root directory ==="
        find . -maxdepth 2 -name "*.xcodeproj" -o -name "*.xcworkspace"
        echo "=== Test directory ==="
        ls -la ScreenshotbotDemoTests/

    - name: List available schemes
      run: |
        xcodebuild -project ScreenshotbotDemo.xcodeproj -list

    - name: List available simulators
      run: |
        xcrun simctl list devices available

    - name: Build and Test
      continue-on-error: true
      run: |
        xcodebuild test \
          -project ScreenshotbotDemo.xcodeproj \
          -scheme ScreenshotbotDemo \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -enableCodeCoverage YES \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults.xcresult

    - name: Extract test logs
      if: always()
      run: |
        echo "=== Test Summary ==="
        if [ -f "TestResults.xcresult" ]; then
          # Use the new xcresulttool syntax
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq '.actions._values[]?.actionResult.testsRef?.id' | head -5
          
          echo "=== Test Failure Details ==="
          # Get test failure summaries using the new syntax
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[]? | "❌ \(.testCaseName): \(.message)"' || echo "No test failures found"
        else
          echo "No test results bundle found"
        fi

    - name: Find screenshots and reference images
      if: always()
      run: |
        echo "=== Finding generated screenshots ==="
        find DerivedData -name "*.png" -type f | head -10
        find DerivedData -name "*.jpg" -type f | head -10
        
        echo "=== Checking for reference images ==="
        find . -name "*Reference*.png" -o -name "*reference*.png" | head -5 || echo "No reference images found"
        
        echo "=== Checking test attachment directories ==="
        find DerivedData -type d -name "Attachments" | head -5

    - name: Run Screenshotbot
      continue-on-error: true
      if: always()
      run: |
        curl -L -o screenshotbot "https://github.com/screenshotbot/screenshotbot-cli/releases/latest/download/screenshotbot-macos"
        chmod +x screenshotbot
        ./screenshotbot \
          --api-key=${{ secrets.SCREENSHOTBOT_API_KEY }} \
          --channel=ci \
          --directory=DerivedData/Logs/Test \
          --fail-on-regression=false \
          --annotation=github-pr

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          DerivedData/Logs/Test/
          TestResults.xcresult
        if-no-files-found: warn
        retention-days: 30

    - name: Upload screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: |
          DerivedData/**/*Attachments/**/*.png
          DerivedData/**/*Attachments/**/*.jpg
        if-no-files-found: warn
        retention-days: 30

    - name: Upload reference images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reference-images
        path: |
          **/*Reference*.png
          **/*reference*.png
        if-no-files-found: warn
        retention-days: 30

    - name: Create test summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "TestResults.xcresult" ]; then
          echo "### Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[]? | "❌ \(.testCaseName)"' >> $GITHUB_STEP_SUMMARY || echo "No test failures found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results bundle found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Screenshotbot Results" >> $GITHUB_STEP_SUMMARY
        echo "Check the [Screenshotbot dashboard](https://screenshotbot.io) for visual comparison results." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Build completed with test failures" >> $GITHUB_STEP_SUMMARY
          echo "This is expected for the first run or when there are visual changes. Review in Screenshotbot." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Mark build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build completed successfully"
        else
          echo "⚠️ Build completed with test failures - this is expected for snapshot tests"
          echo "Check the Screenshotbot dashboard for visual comparison results"
        fi
