name: Screenshotbot CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4.0'

    - name: Check directory structure
      run: |
        pwd
        ls -la
        echo "=== Test directory ==="
        ls -la ScreenshotbotDemoTests/
        echo "=== Checking for reference images ==="
        find . -name "__Snapshots__" -type d || echo "No __Snapshots__ directory found"

    - name: List available schemes
      run: |
        xcodebuild -project ScreenshotbotDemo.xcodeproj -list

    - name: List available simulators
      run: |
        xcrun simctl list devices available

    - name: Build and Test
      continue-on-error: true
      env:
        SNAPSHOT_TESTING_RECORD: true  # Enable record mode to generate reference images
      run: |
        xcodebuild test \
          -project ScreenshotbotDemo.xcodeproj \
          -scheme ScreenshotbotDemo \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.5' \
          -enableCodeCoverage YES \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults.xcresult

    - name: Extract test logs
      if: always()
      run: |
        echo "=== Test Summary ==="
        if [ -f "TestResults.xcresult" ]; then
          # Use the new xcresulttool syntax
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq '.actions._values[]?.actionResult.testsRef?.id' | head -5
          
          echo "=== Test Failure Details ==="
          # Get test failure summaries using the new syntax
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[]? | "❌ \(.testCaseName): \(.message)"' || echo "No test failures found"
        else
          echo "No test results bundle found"
        fi

    - name: Find screenshots and reference images
      if: always()
      run: |
        echo "=== Finding generated screenshots ==="
        find DerivedData -name "*.png" -type f | head -10
        find DerivedData -name "*.jpg" -type f | head -10
        
        echo "=== Checking for reference images ==="
        find . -name "__Snapshots__" -type d
        find . -path "*/__Snapshots__/*.png" | head -5 || echo "No reference images found"
        
        echo "=== Checking test attachment directories ==="
        find DerivedData -type d -name "Attachments" | head -5
        echo "=== Listing all PNG files in DerivedData ==="
        find DerivedData -name "*.png" | head -10

    - name: Upload reference images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reference-images
        path: |
          **/__Snapshots__/
        if-no-files-found: warn
        retention-days: 30

    - name: Download and Run Screenshotbot
      continue-on-error: true
      if: always()
      run: |
        echo "=== Downloading Screenshotbot CLI ==="
        # Use a simpler approach to get the latest version
        LATEST_VERSION=$(curl -s https://api.github.com/repos/screenshotbot/screenshotbot-cli/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Latest version: $LATEST_VERSION"
        
        # Download the CLI
        curl -L -o screenshotbot "https://github.com/screenshotbot/screenshotbot-cli/releases/download/$LATEST_VERSION/screenshotbot-macos"
        
        # Check if download was successful
        if [ ! -f "screenshotbot" ]; then
          echo "Error: Failed to download Screenshotbot CLI"
          exit 1
        fi
        
        # Make it executable
        chmod +x screenshotbot
        
        # Verify it's a valid executable
        if ! ./screenshotbot --help > /dev/null 2>&1; then
          echo "Error: Downloaded file is not a valid Screenshotbot CLI executable"
          exit 1
        fi
        
        echo "=== Running Screenshotbot ==="
        # Try multiple directories to find screenshots
        for dir in "DerivedData/Logs/Test" "DerivedData" "."; do
          echo "Checking directory: $dir"
          if [ -d "$dir" ]; then
            echo "Files in $dir:"
            ls -la "$dir" | head -10
            ./screenshotbot \
              --api-key=${{ secrets.SCREENSHOTBOT_API_KEY }} \
              --channel=ci \
              --directory="$dir" \
              --fail-on-regression=false \
              --annotation=github-pr
            if [ $? -eq 0 ]; then
              echo "Screenshotbot completed successfully"
              break
            else
              echo "Screenshotbot failed for directory: $dir"
            fi
          else
            echo "Directory not found: $dir"
          fi
        done

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          DerivedData/Logs/Test/
          TestResults.xcresult
        if-no-files-found: warn
        retention-days: 30

    - name: Upload screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: |
          DerivedData/**/*.png
          DerivedData/**/*.jpg
        if-no-files-found: warn
        retention-days: 30

    - name: Create test summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "TestResults.xcresult" ]; then
          echo "### Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          xcrun xcresulttool get object --path TestResults.xcresult --format json | jq -r '.issues.testFailureSummaries[]? | "❌ \(.testCaseName)"' >> $GITHUB_STEP_SUMMARY || echo "No test failures found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results bundle found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Screenshotbot Results" >> $GITHUB_STEP_SUMMARY
        echo "Check the [Screenshotbot dashboard](https://screenshotbot.io) for visual comparison results." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Build completed with test failures" >> $GITHUB_STEP_SUMMARY
          echo "Reference images were generated and uploaded as artifacts. Download and commit them to fix the tests." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Mark build status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build completed successfully"
        else
          echo "⚠️ Build completed with test failures"
          echo "Reference images were generated and uploaded as artifacts."
          echo "Download them and commit to your repository to fix the tests."
        fi
